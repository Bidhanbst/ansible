#SPDX-License-Identifier: MIT-0
---
# tasks file for application_deployment
- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /home/ansibleuser/app
    state: directory
    mode: '0777'

- name: Clone Laravel app from GitHub
  ansible.builtin.git:
   repo: 'https://github.com/Bidhanbst/laravelapplication.git'
   dest: /home/ansibleuser/app

- name: Enable multi-architecture docker build
  ansible.builtin.command: 
    cmd: docker buildx create --use && docker buildx inspect â€”bootstrap

- name: Build a Docker image
  ansible.builtin.command: 
    cmd: docker buildx build --platform linux/amd64,linux/arm64 -t bidhanbst/myapplication:latest --push .

- name: Deploy Kubernetes Dashboard
  ansible.builtin.command: 
    cmd: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

- name: Deploy Metrics Server 
  ansible.builtin.command: 
    cmd: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

- name: Create service account for dashboard
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: dashboard-user
        namespace: kubernetes-dashboard

- name: Create Cluster Role binding for dashboard-user
  kubernetes.core.k8s:
    definition:
       apiVersion: rbac.authorization.k8s.io/v1
       kind: ClusterRoleBinding
       metadata:
         name: dashboard-user
       roleRef:
         apiGroup: rbac.authorization.k8s.io
         kind: ClusterRole
         name: cluster-admin
       subjects:
       - kind: ServiceAccount
         name: dashboard-user
         namespace: kubernetes-dashboard

- name: Apply Persistent Volume
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: nfs-pv
      spec:
        storageClassName: manual
        capacity:
          storage: 10Gi
        accessModes:
          - ReadWriteMany
        nfs:
          path: /home/ansibleuser/nfs
          server: 192.168.130.175

- name: Apply Persistent Volume Claim
  kubernetes.core.k8s:
    definition:
       apiVersion: v1
       kind: PersistentVolumeClaim
       metadata:
         name: nfs-pvc
       spec:
         storageClassName: manual
         accessModes:
           - ReadWriteMany
         resources:
           requests:
             storage: 10Gi


- name: Apply Storage Class
  kubernetes.core.k8s:
    definition:   
       kind: StorageClass
       apiVersion: storage.k8s.io/v1
       metadata:
         name: manual
       provisioner: kubernetes.io/no-provisioner
       volumeBindingMode: Immediate

- name: Apply database statefulsets
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: postgres
      spec:
        selector:
          matchLabels:
            app: postgres
        serviceName: postgres
        template:
          metadata:
            labels:
              app: postgres
          spec:
            containers:
              - name: postgres
                image: postgres:latest
                env:
                  - name: POSTGRES_USER
                    value: postgres
                  - name: POSTGRES_PASSWORD
                    value: postgres
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        apiVersion: v1
                        fieldPath: status.podIP
                ports:
                - name: postgres
                  containerPort: 5432
                livenessProbe:
                  exec:
                    command:
                      - "sh"
                      - "-c"
                      - "pg_isready --host $POD_IP"
                  initialDelaySeconds: 30
                  periodSeconds: 5
                  timeoutSeconds: 5
                readinessProbe:
                  exec:
                    command:
                      - "sh"
                      - "-c"
                      - "pg_isready --host $POD_IP"
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 1
                volumeMounts:
                - name: data
                  mountPath: /var/lib/postgresql/data
            volumes:
             - name: data
               persistentVolumeClaim:
                claimName: nfs-pvc

- name: Apply database service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: postgres
        labels:
          app: postgres
      spec:
        ports:
          - name: postgres
            port: 5432
        clusterIP: None
        selector:
          app: postgres 

- name: Apply Application deployment
  kubernetes.core.k8s:
    definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: myapplication
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: myapplication
          template:
            metadata:
              labels:
                app: myapplication
            spec:
              containers:
                - name: myapplication
                  image: bidhanbst/myapplication:latest
                  workingDir: /app
                  ports:
                    - containerPort: 8000
                  env:
                    - name: DB_HOST
                      value: postgres.default.svc.cluster.local
                    - name: DB_CONNECTION
                      value: pgsql
                    - name: DB_DATABASE
                      value: test-db
                    - name: DB_USERNAME
                      value: postgres
                    - name: DB_PASSWORD
                      value: postgres
                  command: ["/bin/sh", "-c"]
                  args:
                    - |
                      composer install && \
                      php artisan migrate --force && \
                      php artisan serve --host=0.0.0.0 --port=8000
                  resources:
                    requests:
                      cpu: 500m

- name: Apply Application service
  kubernetes.core.k8s:
    definition:
       apiVersion: v1
       kind: Service
       metadata:
         name: myapplication
       spec:
         type: NodePort
         selector:
           app: myapplication
         ports:
           - port: 8000
             nodePort: 32000

- name: Apply Horizontal Pod Scaler
  kubernetes.core.k8s:
    definition:
       apiVersion: autoscaling/v2
       kind: HorizontalPodAutoscaler
       metadata:
         name: myapplication-autoscaler
       spec:
         scaleTargetRef:
           apiVersion: apps/v1
           kind: Deployment
           name: myapplication
         minReplicas: 3
         maxReplicas: 9
         metrics:
           - type: Resource
             resource:
               name: cpu
               target:
                 type: Utilization
                 averageUtilization: 50






